#!/usr/bin/env python

# Copyright 2015 Jason Edelman <jason@networktocode.com>
# Network to Code, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---
module: ntc_show_command
short_description: Gets config data from devices that don't have an API
description:
    - This module offers structured data for CLI enabled devices by
      using the TextFSM library for templating and netmiko for SSH
      connectivity
author: Jason Edelman (@jedelman8)
requirements:
    - netmiko
    - textfsm
    - terminal
options:
    connection:
        description:
            - connect to device using netmiko or read from offline file
              for testing
        required: false
        default: ssh
        choices: ['ssh', 'offline']
        aliases: []
    platform:
        description:
            - Platform FROM the index file
        required: true
        default: ssh
        choices: []
        aliases: []
    template_dir:
        description:
            - path where TextFSM templates are stored. Default path is ntc
              with ntc in the same working dir as the playbook being run
        required: false
        default: ntc_templates
        choices: []
        aliases: []
    index_file:
        description:
            - name of index file.  file location must be relative to
              the template_dir
        required: false
        default: index
        choices: []
        aliases: []
    file:
        description:
            - If using connection=offline, this is the file (with path)
              of a file that contains raw text output, i.e.
              'show command' and then the contents of the file will
              be rendered with the the TextFSM template
        required: false
        default: null
        choices: []
        aliases: []
    command:
        description:
            - Command to execute on target device
        required: true
        default: null
        choices: []
        aliases: []
    host:
        description:
            - IP Address or hostname (resolvable by Ansible control host)
        required: false
        default: null
        choices: []
        aliases: []
    port:
        description:
            - SSH port to use to connect to the target device
        required: false
        default: 22
        choices: []
        aliases: []
    delay:
        description:
            - Wait for command output from target device
        required: false
        default: 1
        choices: []
        aliases: []
    username:
        description:
            - Username used to login to the target device
        required: false
        default: null
        choices: []
        aliases: []
    password:
        description:
            - Password used to login to the target device
        required: false
        default: null
        choices: []
        aliases: []
    secret:
        description:
            - Password used to enter a privileged mode on the target device
        required: false
        default: null
        choices: []
        aliases: []
    use_keys:
        description:
            - Boolean true/false if ssh key login should be attempted
        required: false
        default: false
        choices: []
        aliases: []
    key_file:
        description:
            - Path to private ssh key used for login
        required: false
        default: null
        choices: []
        aliases: []
'''
EXAMPLES = '''

# get vlan data
- ntc_show_command:
    connection=ssh
    platform=cisco_nxos
    command='show vlan'
    host={{ inventory_hostname }}
    username={{ username }}
    password={{ password }}

# get snmp community
- ntc_show_command:
    connection=ssh
    platform=cisco_nxos
    command='show snmp community'
    host={{ inventory_hostname }}
    username={{ username }}
    password={{ password }}
    secret:{{ secret }}

'''

import os.path
import socket
from netmiko import ConnectHandler


HAS_TEXTFSM = True
try:
    from clitable import CliTableError
    import clitable
except:
    try:
        from textfsm.clitable import CliTableError
        import textfsm.clitable as clitable
    except:
        HAS_TEXTFSM = False


def clitable_to_dict(cli_table):
    """Converts TextFSM cli_table object to list of dictionaries
    """
    objs = []
    for row in cli_table:
        temp_dict = {}
        for index, element in enumerate(row):
            temp_dict[cli_table.header[index].lower()] = element
        objs.append(temp_dict)

    return objs


def main():

    module = AnsibleModule(
        argument_spec=dict(
            connection=dict(choices=['ssh', 'offline'],
                            default='ssh'),
            platform=dict(required=True),
            file=dict(required=False),
            index_file=dict(default='index'),
            template_dir=dict(default='ntc_templates'),
            command=dict(required=True),
            host=dict(required=False),
            port=dict(default=22, required=False),
            delay=dict(default=1, required=False),
            username=dict(required=False, type='str'),
            password=dict(required=False, type='str'),
            secret=dict(required=False, type='str'),
            use_keys=dict(required=False, default=False),
            key_file=dict(required=False, default=None, type='str'),
        ),
        required_together=(
            ['host', 'password', 'username'],
        ),
        supports_check_mode=False
    )
    if not HAS_TEXTFSM:
        module.fail_json(msg='This module requires TextFSM')

    connection = module.params['connection']
    platform = module.params['platform']
    device_type = platform.split('-')[0]
    raw_file = module.params['file']
    index_file = module.params['index_file']
    template_dir = module.params['template_dir']
    command = module.params['command']
    username = module.params['username']
    password = module.params['password']
    secret = module.params['secret']
    use_keys = module.params['use_keys']
    key_file = module.params['key_file']
    port = int(module.params['port'])
    delay = int(module.params['delay'])

    if module.params['host']:
        host = socket.gethostbyname(module.params['host'])

    if connection == 'ssh' and not module.params['host']:
        module.fail_json(msg='specify host if using connection=ssh')

    if connection == 'offline' and not raw_file:
        module.fail_json(msg='specifiy file if using connection=offline')

    if template_dir.endswith('/'):
        template_dir.rstrip('/')

    if not os.path.isfile(template_dir + '/' + index_file):
        module.fail_json(msg='could not find or read index file')

    if raw_file and not os.path.isfile(raw_file):
        module.fail_json(msg='could not read raw text file')

    if connection == 'ssh':

        import getpass
        print(getpass.getuser())
        device = ConnectHandler(
                    device_type=device_type,
                    ip=socket.gethostbyname(host),
                    port=port,
                    username=username,
                    password=password,
                    secret=secret,
                    use_keys=use_keys,
                    key_file=key_file
                    )   
        if secret:
            device.enable()

        rawtxt = device.send_command(command, delay_factor=delay)

    elif connection == 'offline':
        with open(raw_file, 'r') as data:
            rawtxt = data.read()

    cli_table = clitable.CliTable(index_file, template_dir)

    attrs = {'Command': command, 'Platform': platform}

    try:
        cli_table.ParseCmd(rawtxt, attrs)
    except CliTableError as e:
        module.fail_json(msg='parsing error',
                         error=str(e))

    structured_data = clitable_to_dict(cli_table)

    results = {}
    results['response'] = structured_data

    module.exit_json(**results)


from ansible.module_utils.basic import *
if __name__ == "__main__":
    main()
